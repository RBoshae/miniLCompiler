Program_Prime:
    Program_Prime --> Program

Program:
    Program  --> Function Program | epsilon

Function:
    Function --> function identifier SEMICOLON beginparams A endparams beginLocals A endLocals beginBody B SEMICOLON endBody
    A --> Declaration SEMICOLON A | epsilon
    B --> Statement SEMICOLON | Statement SEMICOLON Beta

Declaration:
    Declaration --> identifier C COLON D integer
    C --> COMMA identifier C
    D --> ARRAY L_SQUARE_BRACKET number R_SQUARE_BRACKET of

Statement:
    Statement --> E | F | H | I | J | K | WRITE Var Lima | WRITE Var | CONTINUE | RETURN Expression
    E --> Variable ASSIGN Expression
    F --> IF Bool-Expr THEN Statement SEMICOLON Beta G ENDIF | IF Bool-Expr THEN Statement SEMICOLON G ENDIF
    G --> ELSE Statement SEMICOLON | ELSE Statement SEMICOLON Beta | epsilon
    H --> WHILE Bool-Expr BEGINLOOP Statement SEMICOLON ENDLOOP | WHILE Bool-Expr BEGINLOOP Statement SEMICOLON Beta ENDLOOP
    I --> DO BEGINLOOP Statement SEMICOLON ENDLOOP | DO BEGINLOOP Statement SEMICOLON Beta ENDLOOP
    J --> FOREACH identifiers IN identifiers BEGINLOOP Statement SEMICOLON Beta ENDLOOP | FOREACH identifiers IN identifiers BEGINLOOP Statement SEMICOLON ENDLOOP
    K --> READ Var Lima | READ Var
    Lima --> COMMA Var | COMMA Var Lima
    M --> write Var L
    N --> continue
    O --> return Expression

Bool-Expr:
    Bool-Expr --> Relation-And-Expr Papa | Relation-And-Expr
    Papa --> OR Relation-And-Expr | OR Relation-And-Expr Papa

Relation-And-Expr:
    Relation-And-Expr --> Relation-Expr Quebec | Relation-Expr
    Quebec --> AND Relation-Expr | AND Relation-Expr Quebec

Relation-Expr:
    Relation-Expr --> Expression Comp Expression | NOT Expression Comp Expression | TRUE | NOT TRUE | FALSE | NOT FALSE | L_PAREN Bool-Expr R_PAREN | NOT L_PAREN Bool-Expr R_PAREN

Comp:
    Comp --> EQ | NEQ | LT | GT | LTE | GTE

Expression:
    Expression --> Multiplicative-Expr S T
    S --> PLUS Multiplicative-Expr S T | epsilon
    T --> SUB Multiplicative-Expr S T | epsilon

Multiplicative-Expr:
    Multiplicative-Expr --> Term U V W
    U --> MULT Term U V W | epsilon
    V --> DIV Term U V W | epsilon
    W --> MOD Term U V W | epsilon

Term:
    Term --> Var | SUB Var | NUMBER | SUB NUMBER | L_PAREN Expression R_PAREN | SUB L_PAREN Expression R_PAREN |  identifiers L_PAREN Y R_PAREN
    Y -->  Expression Z | epsilon
    Z -- > COMMA Expression Z | epsilon

Var:
    identifiers | identifiers L_SQUARE_BRACKET Expression R_SQUARE_BRACKET
    identifiers --> IDENT
